/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* src = "lib/byte_unstriping.v:7" *)
module BYTE_UNSTRIPING(data_out, valid_out, lane_0, lane_1, valid_0, valid_1, clk_2f, clk_f);
  (* src = "lib/byte_unstriping.v:13" *)
  wire [31:0] _000_;
  (* src = "lib/byte_unstriping.v:13" *)
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  (* src = "lib/byte_unstriping.v:11" *)
  input clk_2f;
  (* src = "lib/byte_unstriping.v:11" *)
  input clk_f;
  (* src = "lib/byte_unstriping.v:8" *)
  output [31:0] data_out;
  (* src = "lib/byte_unstriping.v:10" *)
  input [31:0] lane_0;
  (* src = "lib/byte_unstriping.v:10" *)
  input [31:0] lane_1;
  (* src = "lib/byte_unstriping.v:11" *)
  input valid_0;
  (* src = "lib/byte_unstriping.v:11" *)
  input valid_1;
  (* src = "lib/byte_unstriping.v:9" *)
  output valid_out;
  NOT _072_ (
    .A(valid_0),
    .Y(_002_)
  );
  NOT _073_ (
    .A(valid_1),
    .Y(_003_)
  );
  NOT _074_ (
    .A(clk_f),
    .Y(_004_)
  );
  NOR _075_ (
    .A(_002_),
    .B(clk_f),
    .Y(_005_)
  );
  NAND _076_ (
    .A(lane_0[0]),
    .B(_005_),
    .Y(_006_)
  );
  NOR _077_ (
    .A(_003_),
    .B(_004_),
    .Y(_007_)
  );
  NAND _078_ (
    .A(lane_1[0]),
    .B(_007_),
    .Y(_008_)
  );
  NAND _079_ (
    .A(_006_),
    .B(_008_),
    .Y(_000_[0])
  );
  NAND _080_ (
    .A(lane_0[1]),
    .B(_005_),
    .Y(_009_)
  );
  NAND _081_ (
    .A(lane_1[1]),
    .B(_007_),
    .Y(_010_)
  );
  NAND _082_ (
    .A(_009_),
    .B(_010_),
    .Y(_000_[1])
  );
  NAND _083_ (
    .A(lane_0[2]),
    .B(_005_),
    .Y(_011_)
  );
  NAND _084_ (
    .A(lane_1[2]),
    .B(_007_),
    .Y(_012_)
  );
  NAND _085_ (
    .A(_011_),
    .B(_012_),
    .Y(_000_[2])
  );
  NAND _086_ (
    .A(lane_0[3]),
    .B(_005_),
    .Y(_013_)
  );
  NAND _087_ (
    .A(lane_1[3]),
    .B(_007_),
    .Y(_014_)
  );
  NAND _088_ (
    .A(_013_),
    .B(_014_),
    .Y(_000_[3])
  );
  NAND _089_ (
    .A(lane_0[4]),
    .B(_005_),
    .Y(_015_)
  );
  NAND _090_ (
    .A(lane_1[4]),
    .B(_007_),
    .Y(_016_)
  );
  NAND _091_ (
    .A(_015_),
    .B(_016_),
    .Y(_000_[4])
  );
  NAND _092_ (
    .A(lane_0[5]),
    .B(_005_),
    .Y(_017_)
  );
  NAND _093_ (
    .A(lane_1[5]),
    .B(_007_),
    .Y(_018_)
  );
  NAND _094_ (
    .A(_017_),
    .B(_018_),
    .Y(_000_[5])
  );
  NAND _095_ (
    .A(lane_0[6]),
    .B(_005_),
    .Y(_019_)
  );
  NAND _096_ (
    .A(lane_1[6]),
    .B(_007_),
    .Y(_020_)
  );
  NAND _097_ (
    .A(_019_),
    .B(_020_),
    .Y(_000_[6])
  );
  NAND _098_ (
    .A(lane_0[7]),
    .B(_005_),
    .Y(_021_)
  );
  NAND _099_ (
    .A(lane_1[7]),
    .B(_007_),
    .Y(_022_)
  );
  NAND _100_ (
    .A(_021_),
    .B(_022_),
    .Y(_000_[7])
  );
  NAND _101_ (
    .A(lane_0[8]),
    .B(_005_),
    .Y(_023_)
  );
  NAND _102_ (
    .A(lane_1[8]),
    .B(_007_),
    .Y(_024_)
  );
  NAND _103_ (
    .A(_023_),
    .B(_024_),
    .Y(_000_[8])
  );
  NAND _104_ (
    .A(lane_0[9]),
    .B(_005_),
    .Y(_025_)
  );
  NAND _105_ (
    .A(lane_1[9]),
    .B(_007_),
    .Y(_026_)
  );
  NAND _106_ (
    .A(_025_),
    .B(_026_),
    .Y(_000_[9])
  );
  NAND _107_ (
    .A(lane_0[10]),
    .B(_005_),
    .Y(_027_)
  );
  NAND _108_ (
    .A(lane_1[10]),
    .B(_007_),
    .Y(_028_)
  );
  NAND _109_ (
    .A(_027_),
    .B(_028_),
    .Y(_000_[10])
  );
  NAND _110_ (
    .A(lane_0[11]),
    .B(_005_),
    .Y(_029_)
  );
  NAND _111_ (
    .A(lane_1[11]),
    .B(_007_),
    .Y(_030_)
  );
  NAND _112_ (
    .A(_029_),
    .B(_030_),
    .Y(_000_[11])
  );
  NAND _113_ (
    .A(lane_0[12]),
    .B(_005_),
    .Y(_031_)
  );
  NAND _114_ (
    .A(lane_1[12]),
    .B(_007_),
    .Y(_032_)
  );
  NAND _115_ (
    .A(_031_),
    .B(_032_),
    .Y(_000_[12])
  );
  NAND _116_ (
    .A(lane_0[13]),
    .B(_005_),
    .Y(_033_)
  );
  NAND _117_ (
    .A(lane_1[13]),
    .B(_007_),
    .Y(_034_)
  );
  NAND _118_ (
    .A(_033_),
    .B(_034_),
    .Y(_000_[13])
  );
  NAND _119_ (
    .A(lane_0[14]),
    .B(_005_),
    .Y(_035_)
  );
  NAND _120_ (
    .A(lane_1[14]),
    .B(_007_),
    .Y(_036_)
  );
  NAND _121_ (
    .A(_035_),
    .B(_036_),
    .Y(_000_[14])
  );
  NAND _122_ (
    .A(lane_0[15]),
    .B(_005_),
    .Y(_037_)
  );
  NAND _123_ (
    .A(lane_1[15]),
    .B(_007_),
    .Y(_038_)
  );
  NAND _124_ (
    .A(_037_),
    .B(_038_),
    .Y(_000_[15])
  );
  NAND _125_ (
    .A(lane_0[16]),
    .B(_005_),
    .Y(_039_)
  );
  NAND _126_ (
    .A(lane_1[16]),
    .B(_007_),
    .Y(_040_)
  );
  NAND _127_ (
    .A(_039_),
    .B(_040_),
    .Y(_000_[16])
  );
  NAND _128_ (
    .A(lane_0[17]),
    .B(_005_),
    .Y(_041_)
  );
  NAND _129_ (
    .A(lane_1[17]),
    .B(_007_),
    .Y(_042_)
  );
  NAND _130_ (
    .A(_041_),
    .B(_042_),
    .Y(_000_[17])
  );
  NAND _131_ (
    .A(lane_0[18]),
    .B(_005_),
    .Y(_043_)
  );
  NAND _132_ (
    .A(lane_1[18]),
    .B(_007_),
    .Y(_044_)
  );
  NAND _133_ (
    .A(_043_),
    .B(_044_),
    .Y(_000_[18])
  );
  NAND _134_ (
    .A(lane_0[19]),
    .B(_005_),
    .Y(_045_)
  );
  NAND _135_ (
    .A(lane_1[19]),
    .B(_007_),
    .Y(_046_)
  );
  NAND _136_ (
    .A(_045_),
    .B(_046_),
    .Y(_000_[19])
  );
  NAND _137_ (
    .A(lane_0[20]),
    .B(_005_),
    .Y(_047_)
  );
  NAND _138_ (
    .A(lane_1[20]),
    .B(_007_),
    .Y(_048_)
  );
  NAND _139_ (
    .A(_047_),
    .B(_048_),
    .Y(_000_[20])
  );
  NAND _140_ (
    .A(lane_0[21]),
    .B(_005_),
    .Y(_049_)
  );
  NAND _141_ (
    .A(lane_1[21]),
    .B(_007_),
    .Y(_050_)
  );
  NAND _142_ (
    .A(_049_),
    .B(_050_),
    .Y(_000_[21])
  );
  NAND _143_ (
    .A(lane_0[22]),
    .B(_005_),
    .Y(_051_)
  );
  NAND _144_ (
    .A(lane_1[22]),
    .B(_007_),
    .Y(_052_)
  );
  NAND _145_ (
    .A(_051_),
    .B(_052_),
    .Y(_000_[22])
  );
  NAND _146_ (
    .A(lane_0[23]),
    .B(_005_),
    .Y(_053_)
  );
  NAND _147_ (
    .A(lane_1[23]),
    .B(_007_),
    .Y(_054_)
  );
  NAND _148_ (
    .A(_053_),
    .B(_054_),
    .Y(_000_[23])
  );
  NAND _149_ (
    .A(lane_0[24]),
    .B(_005_),
    .Y(_055_)
  );
  NAND _150_ (
    .A(lane_1[24]),
    .B(_007_),
    .Y(_056_)
  );
  NAND _151_ (
    .A(_055_),
    .B(_056_),
    .Y(_000_[24])
  );
  NAND _152_ (
    .A(lane_0[25]),
    .B(_005_),
    .Y(_057_)
  );
  NAND _153_ (
    .A(lane_1[25]),
    .B(_007_),
    .Y(_058_)
  );
  NAND _154_ (
    .A(_057_),
    .B(_058_),
    .Y(_000_[25])
  );
  NAND _155_ (
    .A(lane_0[26]),
    .B(_005_),
    .Y(_059_)
  );
  NAND _156_ (
    .A(lane_1[26]),
    .B(_007_),
    .Y(_060_)
  );
  NAND _157_ (
    .A(_059_),
    .B(_060_),
    .Y(_000_[26])
  );
  NAND _158_ (
    .A(lane_0[27]),
    .B(_005_),
    .Y(_061_)
  );
  NAND _159_ (
    .A(lane_1[27]),
    .B(_007_),
    .Y(_062_)
  );
  NAND _160_ (
    .A(_061_),
    .B(_062_),
    .Y(_000_[27])
  );
  NAND _161_ (
    .A(lane_0[28]),
    .B(_005_),
    .Y(_063_)
  );
  NAND _162_ (
    .A(lane_1[28]),
    .B(_007_),
    .Y(_064_)
  );
  NAND _163_ (
    .A(_063_),
    .B(_064_),
    .Y(_000_[28])
  );
  NAND _164_ (
    .A(lane_0[29]),
    .B(_005_),
    .Y(_065_)
  );
  NAND _165_ (
    .A(lane_1[29]),
    .B(_007_),
    .Y(_066_)
  );
  NAND _166_ (
    .A(_065_),
    .B(_066_),
    .Y(_000_[29])
  );
  NAND _167_ (
    .A(lane_0[30]),
    .B(_005_),
    .Y(_067_)
  );
  NAND _168_ (
    .A(lane_1[30]),
    .B(_007_),
    .Y(_068_)
  );
  NAND _169_ (
    .A(_067_),
    .B(_068_),
    .Y(_000_[30])
  );
  NAND _170_ (
    .A(lane_0[31]),
    .B(_005_),
    .Y(_069_)
  );
  NAND _171_ (
    .A(lane_1[31]),
    .B(_007_),
    .Y(_070_)
  );
  NAND _172_ (
    .A(_069_),
    .B(_070_),
    .Y(_000_[31])
  );
  NOR _173_ (
    .A(_005_),
    .B(_007_),
    .Y(_071_)
  );
  NOT _174_ (
    .A(_071_),
    .Y(_001_)
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _175_ (
    .C(clk_2f),
    .D(_001_),
    .Q(valid_out)
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _176_ (
    .C(clk_2f),
    .D(_000_[0]),
    .Q(data_out[0])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _177_ (
    .C(clk_2f),
    .D(_000_[1]),
    .Q(data_out[1])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _178_ (
    .C(clk_2f),
    .D(_000_[2]),
    .Q(data_out[2])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _179_ (
    .C(clk_2f),
    .D(_000_[3]),
    .Q(data_out[3])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _180_ (
    .C(clk_2f),
    .D(_000_[4]),
    .Q(data_out[4])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _181_ (
    .C(clk_2f),
    .D(_000_[5]),
    .Q(data_out[5])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _182_ (
    .C(clk_2f),
    .D(_000_[6]),
    .Q(data_out[6])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _183_ (
    .C(clk_2f),
    .D(_000_[7]),
    .Q(data_out[7])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _184_ (
    .C(clk_2f),
    .D(_000_[8]),
    .Q(data_out[8])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _185_ (
    .C(clk_2f),
    .D(_000_[9]),
    .Q(data_out[9])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _186_ (
    .C(clk_2f),
    .D(_000_[10]),
    .Q(data_out[10])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _187_ (
    .C(clk_2f),
    .D(_000_[11]),
    .Q(data_out[11])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _188_ (
    .C(clk_2f),
    .D(_000_[12]),
    .Q(data_out[12])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _189_ (
    .C(clk_2f),
    .D(_000_[13]),
    .Q(data_out[13])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _190_ (
    .C(clk_2f),
    .D(_000_[14]),
    .Q(data_out[14])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _191_ (
    .C(clk_2f),
    .D(_000_[15]),
    .Q(data_out[15])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _192_ (
    .C(clk_2f),
    .D(_000_[16]),
    .Q(data_out[16])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _193_ (
    .C(clk_2f),
    .D(_000_[17]),
    .Q(data_out[17])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _194_ (
    .C(clk_2f),
    .D(_000_[18]),
    .Q(data_out[18])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _195_ (
    .C(clk_2f),
    .D(_000_[19]),
    .Q(data_out[19])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _196_ (
    .C(clk_2f),
    .D(_000_[20]),
    .Q(data_out[20])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _197_ (
    .C(clk_2f),
    .D(_000_[21]),
    .Q(data_out[21])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _198_ (
    .C(clk_2f),
    .D(_000_[22]),
    .Q(data_out[22])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _199_ (
    .C(clk_2f),
    .D(_000_[23]),
    .Q(data_out[23])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _200_ (
    .C(clk_2f),
    .D(_000_[24]),
    .Q(data_out[24])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _201_ (
    .C(clk_2f),
    .D(_000_[25]),
    .Q(data_out[25])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _202_ (
    .C(clk_2f),
    .D(_000_[26]),
    .Q(data_out[26])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _203_ (
    .C(clk_2f),
    .D(_000_[27]),
    .Q(data_out[27])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _204_ (
    .C(clk_2f),
    .D(_000_[28]),
    .Q(data_out[28])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _205_ (
    .C(clk_2f),
    .D(_000_[29]),
    .Q(data_out[29])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _206_ (
    .C(clk_2f),
    .D(_000_[30]),
    .Q(data_out[30])
  );
  (* src = "lib/byte_unstriping.v:13" *)
  DFF _207_ (
    .C(clk_2f),
    .D(_000_[31]),
    .Q(data_out[31])
  );
endmodule

(* top =  1  *)
(* src = "src/phy_rx.v:7" *)
module PHY_RX(data_out, valid_out, data_in_0, data_in_1, reset, clk_32f, clk_4f, clk_2f, clk_f, sincronizar_bus);
  (* src = "src/phy_rx.v:19" *)
  wire bus_sinc;
  (* src = "src/phy_rx.v:11" *)
  input clk_2f;
  (* src = "src/phy_rx.v:11" *)
  input clk_32f;
  (* src = "src/phy_rx.v:11" *)
  input clk_4f;
  (* src = "src/phy_rx.v:11" *)
  input clk_f;
  (* src = "src/phy_rx.v:15" *)
  wire [31:0] data_32b_0;
  (* src = "src/phy_rx.v:15" *)
  wire [31:0] data_32b_1;
  (* src = "src/phy_rx.v:14" *)
  wire [7:0] data_8b_0;
  (* src = "src/phy_rx.v:14" *)
  wire [7:0] data_8b_1;
  (* src = "src/phy_rx.v:10" *)
  input data_in_0;
  (* src = "src/phy_rx.v:10" *)
  input data_in_1;
  (* src = "src/phy_rx.v:8" *)
  output [31:0] data_out;
  (* src = "src/phy_rx.v:11" *)
  input reset;
  (* src = "src/phy_rx.v:11" *)
  input sincronizar_bus;
  (* src = "src/phy_rx.v:19" *)
  (* unused_bits = "0" *)
  wire tierra;
  (* src = "src/phy_rx.v:18" *)
  wire valid_32b_0;
  (* src = "src/phy_rx.v:18" *)
  wire valid_32b_1;
  (* src = "src/phy_rx.v:17" *)
  wire valid_8b_0;
  (* src = "src/phy_rx.v:17" *)
  wire valid_8b_1;
  (* src = "src/phy_rx.v:9" *)
  output valid_out;
  (* module_not_derived = 32'd1 *)
  (* src = "src/phy_rx.v:22" *)
  BYTE_UNSTRIPING bte_unstrp (
    .clk_2f(clk_2f),
    .clk_f(clk_f),
    .data_out(data_out),
    .lane_0(data_32b_0),
    .lane_1(data_32b_1),
    .valid_0(valid_32b_0),
    .valid_1(valid_32b_1),
    .valid_out(valid_out)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "src/phy_rx.v:32" *)
  m8_32 conv_0 (
    .clk_32f(clk_32f),
    .clk_4f(clk_4f),
    .clk_f(clk_f),
    .data_8_32(data_32b_0),
    .data_input(data_8b_0),
    .reset(reset),
    .sinc(sincronizar_bus),
    .sincout(bus_sinc),
    .valid_8_32(valid_32b_0),
    .valid_input(valid_8b_0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "src/phy_rx.v:43" *)
  m8_32 conv_1 (
    .clk_32f(clk_32f),
    .clk_4f(clk_4f),
    .clk_f(clk_f),
    .data_8_32(data_32b_1),
    .data_input(data_8b_1),
    .reset(reset),
    .sinc(bus_sinc),
    .sincout(tierra),
    .valid_8_32(valid_32b_1),
    .valid_input(valid_8b_1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "src/phy_rx.v:55" *)
  serial_paralelo serelo_0 (
    .clk_32f(clk_32f),
    .clk_4f(clk_4f),
    .data_in(data_in_0),
    .data_out(data_8b_0),
    .reset(reset),
    .valid_out(valid_8b_0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "src/phy_rx.v:62" *)
  serial_paralelo serelo_1 (
    .clk_32f(clk_32f),
    .clk_4f(clk_4f),
    .data_in(data_in_1),
    .data_out(data_8b_1),
    .reset(reset),
    .valid_out(valid_8b_1)
  );
endmodule

(* src = "lib/m8_32.v:7" *)
module m8_32(data_8_32, valid_8_32, sincout, data_input, sinc, valid_input, reset, clk_f, clk_4f, clk_32f);
  (* src = "lib/m8_32.v:30" *)
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  (* src = "lib/m8_32.v:16" *)
  input clk_32f;
  (* src = "lib/m8_32.v:15" *)
  input clk_4f;
  (* src = "lib/m8_32.v:14" *)
  input clk_f;
  (* src = "lib/m8_32.v:7" *)
  output [31:0] data_8_32;
  (* src = "lib/m8_32.v:10" *)
  input [7:0] data_input;
  (* src = "lib/m8_32.v:13" *)
  input reset;
  (* src = "lib/m8_32.v:11" *)
  input sinc;
  (* src = "lib/m8_32.v:9" *)
  output sincout;
  (* src = "lib/m8_32.v:8" *)
  output valid_8_32;
  (* src = "lib/m8_32.v:12" *)
  input valid_input;
  NAND _4_ (
    .A(sinc),
    .B(valid_input),
    .Y(_1_)
  );
  NOT _5_ (
    .A(_1_),
    .Y(_2_)
  );
  NOR _6_ (
    .A(sincout),
    .B(valid_input),
    .Y(_3_)
  );
  NOR _7_ (
    .A(_2_),
    .B(_3_),
    .Y(_0_)
  );
  (* src = "lib/m8_32.v:30" *)
  DFF _8_ (
    .C(clk_4f),
    .D(_0_),
    .Q(sincout)
  );
  assign data_8_32 = 32'd0;
  assign valid_8_32 = 1'h0;
endmodule

(* src = "lib/serial_paralelo.v:1" *)
module serial_paralelo(data_in, clk_4f, clk_32f, reset, valid_out, data_out);
  (* src = "lib/serial_paralelo.v:11" *)
  wire _000_;
  (* src = "lib/serial_paralelo.v:11" *)
  wire [2:0] _001_;
  (* src = "lib/serial_paralelo.v:11" *)
  wire [4:0] _002_;
  (* src = "lib/serial_paralelo.v:11" *)
  wire [7:0] _003_;
  (* src = "lib/serial_paralelo.v:11" *)
  wire [7:0] _004_;
  (* src = "lib/serial_paralelo.v:11" *)
  wire _005_;
  (* src = "lib/serial_paralelo.v:11" *)
  (* unused_bits = "7" *)
  wire [7:0] _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  (* src = "lib/serial_paralelo.v:10" *)
  wire active;
  (* src = "lib/serial_paralelo.v:7" *)
  wire [2:0] bc_counter;
  (* src = "lib/serial_paralelo.v:3" *)
  input clk_32f;
  (* src = "lib/serial_paralelo.v:2" *)
  input clk_4f;
  (* src = "lib/serial_paralelo.v:9" *)
  wire [4:0] counter;
  (* src = "lib/serial_paralelo.v:8" *)
  wire [7:0] data2send;
  (* src = "lib/serial_paralelo.v:1" *)
  input data_in;
  (* src = "lib/serial_paralelo.v:6" *)
  output [7:0] data_out;
  (* src = "lib/serial_paralelo.v:4" *)
  input reset;
  (* src = "lib/serial_paralelo.v:5" *)
  output valid_out;
  (* src = "lib/serial_paralelo.v:8" *)
  (* unused_bits = "7" *)
  wire [7:0] wait_buffer;
  NOT _126_ (
    .A(bc_counter[2]),
    .Y(_097_)
  );
  NOT _127_ (
    .A(data2send[0]),
    .Y(_098_)
  );
  NOT _128_ (
    .A(data2send[1]),
    .Y(_099_)
  );
  NOT _129_ (
    .A(data2send[6]),
    .Y(_100_)
  );
  NOT _130_ (
    .A(counter[2]),
    .Y(_101_)
  );
  NOT _131_ (
    .A(counter[4]),
    .Y(_102_)
  );
  NOT _132_ (
    .A(data_in),
    .Y(_103_)
  );
  NOT _133_ (
    .A(wait_buffer[0]),
    .Y(_104_)
  );
  NOT _134_ (
    .A(wait_buffer[1]),
    .Y(_105_)
  );
  NOT _135_ (
    .A(data2send[2]),
    .Y(_106_)
  );
  NOT _136_ (
    .A(wait_buffer[2]),
    .Y(_107_)
  );
  NOT _137_ (
    .A(wait_buffer[3]),
    .Y(_108_)
  );
  NOT _138_ (
    .A(wait_buffer[4]),
    .Y(_109_)
  );
  NOT _139_ (
    .A(data2send[5]),
    .Y(_110_)
  );
  NOT _140_ (
    .A(wait_buffer[5]),
    .Y(_111_)
  );
  NOT _141_ (
    .A(wait_buffer[6]),
    .Y(_112_)
  );
  NOT _142_ (
    .A(reset),
    .Y(_113_)
  );
  NOT _143_ (
    .A(valid_out),
    .Y(_114_)
  );
  NOT _144_ (
    .A(bc_counter[0]),
    .Y(_115_)
  );
  NOT _145_ (
    .A(bc_counter[1]),
    .Y(_116_)
  );
  NOR _146_ (
    .A(counter[0]),
    .B(counter[1]),
    .Y(_117_)
  );
  NAND _147_ (
    .A(_102_),
    .B(counter[3]),
    .Y(_118_)
  );
  NAND _148_ (
    .A(_101_),
    .B(_117_),
    .Y(_119_)
  );
  NOR _149_ (
    .A(_118_),
    .B(_119_),
    .Y(_120_)
  );
  NOR _150_ (
    .A(data2send[0]),
    .B(_120_),
    .Y(_121_)
  );
  NOR _151_ (
    .A(_103_),
    .B(_113_),
    .Y(_006_[0])
  );
  NOR _152_ (
    .A(_113_),
    .B(_120_),
    .Y(_122_)
  );
  NOT _153_ (
    .A(_122_),
    .Y(_123_)
  );
  NOR _154_ (
    .A(_006_[0]),
    .B(_122_),
    .Y(_124_)
  );
  NOR _155_ (
    .A(_121_),
    .B(_124_),
    .Y(_003_[0])
  );
  NOR _156_ (
    .A(data2send[1]),
    .B(_120_),
    .Y(_125_)
  );
  NOR _157_ (
    .A(_104_),
    .B(_113_),
    .Y(_006_[1])
  );
  NOR _158_ (
    .A(_122_),
    .B(_006_[1]),
    .Y(_007_)
  );
  NOR _159_ (
    .A(_125_),
    .B(_007_),
    .Y(_003_[1])
  );
  NOR _160_ (
    .A(data2send[2]),
    .B(_120_),
    .Y(_008_)
  );
  NOR _161_ (
    .A(_105_),
    .B(_113_),
    .Y(_006_[2])
  );
  NOR _162_ (
    .A(_122_),
    .B(_006_[2]),
    .Y(_009_)
  );
  NOR _163_ (
    .A(_008_),
    .B(_009_),
    .Y(_003_[2])
  );
  NOR _164_ (
    .A(data2send[3]),
    .B(_120_),
    .Y(_010_)
  );
  NOR _165_ (
    .A(_107_),
    .B(_113_),
    .Y(_006_[3])
  );
  NOR _166_ (
    .A(_122_),
    .B(_006_[3]),
    .Y(_011_)
  );
  NOR _167_ (
    .A(_010_),
    .B(_011_),
    .Y(_003_[3])
  );
  NOR _168_ (
    .A(data2send[4]),
    .B(_120_),
    .Y(_012_)
  );
  NOR _169_ (
    .A(_108_),
    .B(_113_),
    .Y(_006_[4])
  );
  NOR _170_ (
    .A(_122_),
    .B(_006_[4]),
    .Y(_013_)
  );
  NOR _171_ (
    .A(_012_),
    .B(_013_),
    .Y(_003_[4])
  );
  NOR _172_ (
    .A(data2send[5]),
    .B(_120_),
    .Y(_014_)
  );
  NOR _173_ (
    .A(_109_),
    .B(_113_),
    .Y(_006_[5])
  );
  NOR _174_ (
    .A(_122_),
    .B(_006_[5]),
    .Y(_015_)
  );
  NOR _175_ (
    .A(_014_),
    .B(_015_),
    .Y(_003_[5])
  );
  NOR _176_ (
    .A(data2send[6]),
    .B(_120_),
    .Y(_016_)
  );
  NOR _177_ (
    .A(_111_),
    .B(_113_),
    .Y(_006_[6])
  );
  NOR _178_ (
    .A(_122_),
    .B(_006_[6]),
    .Y(_017_)
  );
  NOR _179_ (
    .A(_016_),
    .B(_017_),
    .Y(_003_[6])
  );
  NOR _180_ (
    .A(data2send[7]),
    .B(_120_),
    .Y(_018_)
  );
  NAND _181_ (
    .A(_112_),
    .B(_120_),
    .Y(_019_)
  );
  NAND _182_ (
    .A(reset),
    .B(_019_),
    .Y(_020_)
  );
  NOR _183_ (
    .A(_018_),
    .B(_020_),
    .Y(_003_[7])
  );
  NAND _184_ (
    .A(bc_counter[0]),
    .B(bc_counter[1]),
    .Y(_021_)
  );
  NOT _185_ (
    .A(_021_),
    .Y(_022_)
  );
  NOR _186_ (
    .A(bc_counter[2]),
    .B(_022_),
    .Y(_023_)
  );
  NAND _187_ (
    .A(active),
    .B(_120_),
    .Y(_024_)
  );
  NOR _188_ (
    .A(_023_),
    .B(_024_),
    .Y(_025_)
  );
  NOR _189_ (
    .A(_114_),
    .B(_025_),
    .Y(_026_)
  );
  NAND _190_ (
    .A(data2send[3]),
    .B(data2send[4]),
    .Y(_027_)
  );
  NAND _191_ (
    .A(data2send[5]),
    .B(data2send[7]),
    .Y(_028_)
  );
  NOR _192_ (
    .A(_027_),
    .B(_028_),
    .Y(_029_)
  );
  NOR _193_ (
    .A(data2send[0]),
    .B(data2send[1]),
    .Y(_030_)
  );
  NOT _194_ (
    .A(_030_),
    .Y(_031_)
  );
  NAND _195_ (
    .A(_100_),
    .B(data2send[2]),
    .Y(_032_)
  );
  NOR _196_ (
    .A(_031_),
    .B(_032_),
    .Y(_033_)
  );
  NAND _197_ (
    .A(_029_),
    .B(_033_),
    .Y(_034_)
  );
  NAND _198_ (
    .A(_025_),
    .B(_034_),
    .Y(_035_)
  );
  NOT _199_ (
    .A(_035_),
    .Y(_036_)
  );
  NOR _200_ (
    .A(_026_),
    .B(_036_),
    .Y(_037_)
  );
  NOR _201_ (
    .A(_113_),
    .B(_037_),
    .Y(_005_)
  );
  NOR _202_ (
    .A(bc_counter[2]),
    .B(_021_),
    .Y(_038_)
  );
  NAND _203_ (
    .A(_120_),
    .B(_038_),
    .Y(_039_)
  );
  NAND _204_ (
    .A(_097_),
    .B(_120_),
    .Y(_040_)
  );
  NOR _205_ (
    .A(_021_),
    .B(_040_),
    .Y(_041_)
  );
  NOR _206_ (
    .A(active),
    .B(_041_),
    .Y(_042_)
  );
  NOR _207_ (
    .A(_113_),
    .B(_042_),
    .Y(_000_)
  );
  NAND _208_ (
    .A(_120_),
    .B(_023_),
    .Y(_043_)
  );
  NOR _209_ (
    .A(_034_),
    .B(_043_),
    .Y(_044_)
  );
  NOR _210_ (
    .A(active),
    .B(_039_),
    .Y(_045_)
  );
  NOR _211_ (
    .A(_044_),
    .B(_045_),
    .Y(_046_)
  );
  NOR _212_ (
    .A(_115_),
    .B(_046_),
    .Y(_047_)
  );
  NOR _213_ (
    .A(bc_counter[0]),
    .B(_044_),
    .Y(_048_)
  );
  NOT _214_ (
    .A(_048_),
    .Y(_049_)
  );
  NAND _215_ (
    .A(reset),
    .B(_049_),
    .Y(_050_)
  );
  NOR _216_ (
    .A(_047_),
    .B(_050_),
    .Y(_001_[0])
  );
  NOR _217_ (
    .A(_116_),
    .B(_045_),
    .Y(_051_)
  );
  NOR _218_ (
    .A(bc_counter[0]),
    .B(bc_counter[1]),
    .Y(_052_)
  );
  NOT _219_ (
    .A(_052_),
    .Y(_053_)
  );
  NOR _220_ (
    .A(_044_),
    .B(_051_),
    .Y(_054_)
  );
  NAND _221_ (
    .A(reset),
    .B(_053_),
    .Y(_055_)
  );
  NOR _222_ (
    .A(_054_),
    .B(_055_),
    .Y(_001_[1])
  );
  NOR _223_ (
    .A(bc_counter[2]),
    .B(_045_),
    .Y(_056_)
  );
  NOR _224_ (
    .A(_113_),
    .B(_056_),
    .Y(_001_[2])
  );
  NOR _225_ (
    .A(counter[0]),
    .B(_113_),
    .Y(_002_[0])
  );
  NAND _226_ (
    .A(counter[0]),
    .B(counter[1]),
    .Y(_057_)
  );
  NAND _227_ (
    .A(reset),
    .B(_057_),
    .Y(_058_)
  );
  NOR _228_ (
    .A(_117_),
    .B(_058_),
    .Y(_002_[1])
  );
  NOR _229_ (
    .A(_101_),
    .B(_057_),
    .Y(_059_)
  );
  NAND _230_ (
    .A(_101_),
    .B(_057_),
    .Y(_060_)
  );
  NAND _231_ (
    .A(reset),
    .B(_060_),
    .Y(_061_)
  );
  NOR _232_ (
    .A(_059_),
    .B(_061_),
    .Y(_002_[2])
  );
  NAND _233_ (
    .A(counter[3]),
    .B(_059_),
    .Y(_062_)
  );
  NOR _234_ (
    .A(counter[3]),
    .B(_059_),
    .Y(_063_)
  );
  NOT _235_ (
    .A(_063_),
    .Y(_064_)
  );
  NAND _236_ (
    .A(_062_),
    .B(_064_),
    .Y(_065_)
  );
  NOR _237_ (
    .A(_123_),
    .B(_065_),
    .Y(_002_[3])
  );
  NOR _238_ (
    .A(_102_),
    .B(_062_),
    .Y(_066_)
  );
  NAND _239_ (
    .A(_102_),
    .B(_062_),
    .Y(_067_)
  );
  NAND _240_ (
    .A(reset),
    .B(_067_),
    .Y(_068_)
  );
  NOR _241_ (
    .A(_066_),
    .B(_068_),
    .Y(_002_[4])
  );
  NAND _242_ (
    .A(_098_),
    .B(_025_),
    .Y(_069_)
  );
  NOR _243_ (
    .A(data_out[0]),
    .B(_025_),
    .Y(_070_)
  );
  NOT _244_ (
    .A(_070_),
    .Y(_071_)
  );
  NAND _245_ (
    .A(_069_),
    .B(_071_),
    .Y(_072_)
  );
  NOR _246_ (
    .A(_113_),
    .B(_072_),
    .Y(_004_[0])
  );
  NOR _247_ (
    .A(data_out[1]),
    .B(_025_),
    .Y(_073_)
  );
  NAND _248_ (
    .A(_099_),
    .B(_025_),
    .Y(_074_)
  );
  NAND _249_ (
    .A(reset),
    .B(_074_),
    .Y(_075_)
  );
  NOR _250_ (
    .A(_073_),
    .B(_075_),
    .Y(_004_[1])
  );
  NOR _251_ (
    .A(data_out[2]),
    .B(_025_),
    .Y(_076_)
  );
  NAND _252_ (
    .A(_106_),
    .B(_025_),
    .Y(_077_)
  );
  NAND _253_ (
    .A(reset),
    .B(_077_),
    .Y(_078_)
  );
  NOR _254_ (
    .A(_076_),
    .B(_078_),
    .Y(_004_[2])
  );
  NOR _255_ (
    .A(data_out[3]),
    .B(_025_),
    .Y(_079_)
  );
  NOT _256_ (
    .A(_079_),
    .Y(_080_)
  );
  NAND _257_ (
    .A(reset),
    .B(_080_),
    .Y(_081_)
  );
  NOR _258_ (
    .A(data2send[3]),
    .B(_035_),
    .Y(_082_)
  );
  NOR _259_ (
    .A(_081_),
    .B(_082_),
    .Y(_004_[3])
  );
  NOR _260_ (
    .A(data_out[4]),
    .B(_025_),
    .Y(_083_)
  );
  NOT _261_ (
    .A(_083_),
    .Y(_084_)
  );
  NAND _262_ (
    .A(reset),
    .B(_084_),
    .Y(_085_)
  );
  NOR _263_ (
    .A(data2send[4]),
    .B(_035_),
    .Y(_086_)
  );
  NOR _264_ (
    .A(_085_),
    .B(_086_),
    .Y(_004_[4])
  );
  NOR _265_ (
    .A(data_out[5]),
    .B(_025_),
    .Y(_087_)
  );
  NAND _266_ (
    .A(_110_),
    .B(_025_),
    .Y(_088_)
  );
  NAND _267_ (
    .A(reset),
    .B(_088_),
    .Y(_089_)
  );
  NOR _268_ (
    .A(_087_),
    .B(_089_),
    .Y(_004_[5])
  );
  NOR _269_ (
    .A(data_out[6]),
    .B(_025_),
    .Y(_090_)
  );
  NAND _270_ (
    .A(_100_),
    .B(_025_),
    .Y(_091_)
  );
  NAND _271_ (
    .A(reset),
    .B(_091_),
    .Y(_092_)
  );
  NOR _272_ (
    .A(_090_),
    .B(_092_),
    .Y(_004_[6])
  );
  NOR _273_ (
    .A(data_out[7]),
    .B(_025_),
    .Y(_093_)
  );
  NOT _274_ (
    .A(_093_),
    .Y(_094_)
  );
  NAND _275_ (
    .A(reset),
    .B(_094_),
    .Y(_095_)
  );
  NOR _276_ (
    .A(data2send[7]),
    .B(_035_),
    .Y(_096_)
  );
  NOR _277_ (
    .A(_095_),
    .B(_096_),
    .Y(_004_[7])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _278_ (
    .C(clk_32f),
    .D(_000_),
    .Q(active)
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _279_ (
    .C(clk_32f),
    .D(_006_[0]),
    .Q(wait_buffer[0])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _280_ (
    .C(clk_32f),
    .D(_006_[1]),
    .Q(wait_buffer[1])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _281_ (
    .C(clk_32f),
    .D(_006_[2]),
    .Q(wait_buffer[2])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _282_ (
    .C(clk_32f),
    .D(_006_[3]),
    .Q(wait_buffer[3])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _283_ (
    .C(clk_32f),
    .D(_006_[4]),
    .Q(wait_buffer[4])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _284_ (
    .C(clk_32f),
    .D(_006_[5]),
    .Q(wait_buffer[5])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _285_ (
    .C(clk_32f),
    .D(_006_[6]),
    .Q(wait_buffer[6])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _286_ (
    .C(clk_32f),
    .D(_001_[0]),
    .Q(bc_counter[0])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _287_ (
    .C(clk_32f),
    .D(_001_[1]),
    .Q(bc_counter[1])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _288_ (
    .C(clk_32f),
    .D(_001_[2]),
    .Q(bc_counter[2])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _289_ (
    .C(clk_32f),
    .D(_002_[0]),
    .Q(counter[0])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _290_ (
    .C(clk_32f),
    .D(_002_[1]),
    .Q(counter[1])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _291_ (
    .C(clk_32f),
    .D(_002_[2]),
    .Q(counter[2])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _292_ (
    .C(clk_32f),
    .D(_002_[3]),
    .Q(counter[3])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _293_ (
    .C(clk_32f),
    .D(_002_[4]),
    .Q(counter[4])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _294_ (
    .C(clk_32f),
    .D(_005_),
    .Q(valid_out)
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _295_ (
    .C(clk_32f),
    .D(_003_[0]),
    .Q(data2send[0])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _296_ (
    .C(clk_32f),
    .D(_003_[1]),
    .Q(data2send[1])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _297_ (
    .C(clk_32f),
    .D(_003_[2]),
    .Q(data2send[2])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _298_ (
    .C(clk_32f),
    .D(_003_[3]),
    .Q(data2send[3])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _299_ (
    .C(clk_32f),
    .D(_003_[4]),
    .Q(data2send[4])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _300_ (
    .C(clk_32f),
    .D(_003_[5]),
    .Q(data2send[5])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _301_ (
    .C(clk_32f),
    .D(_003_[6]),
    .Q(data2send[6])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _302_ (
    .C(clk_32f),
    .D(_003_[7]),
    .Q(data2send[7])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _303_ (
    .C(clk_32f),
    .D(_004_[0]),
    .Q(data_out[0])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _304_ (
    .C(clk_32f),
    .D(_004_[1]),
    .Q(data_out[1])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _305_ (
    .C(clk_32f),
    .D(_004_[2]),
    .Q(data_out[2])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _306_ (
    .C(clk_32f),
    .D(_004_[3]),
    .Q(data_out[3])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _307_ (
    .C(clk_32f),
    .D(_004_[4]),
    .Q(data_out[4])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _308_ (
    .C(clk_32f),
    .D(_004_[5]),
    .Q(data_out[5])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _309_ (
    .C(clk_32f),
    .D(_004_[6]),
    .Q(data_out[6])
  );
  (* src = "lib/serial_paralelo.v:11" *)
  DFF _310_ (
    .C(clk_32f),
    .D(_004_[7]),
    .Q(data_out[7])
  );
endmodule
